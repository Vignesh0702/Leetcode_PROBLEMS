//O(NLOGN)--- Sort the strings and equate , we will be able to figure out the anagram
class Solution {
public:
    bool isAnagram(string s, string t) {
       sort(s.begin(),s.end());
       sort(t.begin(),t.end());
       if(s==t)
       {
           return true;
       }
       else{
           return false;
       }
    }
};

//o(S+T),O(S+T), TIME AND SPACE COMPLEXITY

class Solution {
public:
    bool isAnagram(string s, string t) {
      if(s.size() !=t.size())
      {
          return false;
      }
      unordered_map<char,int> s_map;
      unordered_map<char,int> t_map;

      for(int i=0;i<s.size();i++)
      {
          s_map[s[i]]++;
          t_map[t[i]]++;
      }
      for(int i=0;i<s.size();i++)
      {
          if(s_map!=t_map)
          {
              return false;
          }
      }
      return true;
    }
};
